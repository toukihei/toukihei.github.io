<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>中学为体，西学为用</title>
  
  <subtitle>There is no royal road to learning.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://toukihei.github.io/"/>
  <updated>2019-07-25T13:35:07.000Z</updated>
  <id>https://toukihei.github.io/</id>
  
  <author>
    <name>Tou Kihei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VIM常用命令</title>
    <link href="https://toukihei.github.io/2019/07/24/VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://toukihei.github.io/2019/07/24/VIM常用命令/</id>
    <published>2019-07-24T12:39:31.000Z</published>
    <updated>2019-07-25T13:35:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-删除字符"><a href="#1-删除字符" class="headerlink" title="1.删除字符"></a>1.删除字符</h2><p>  要删除一个字符，只需要将光标移到该字符上按下”x”。</p><h2 id="2-删除一行"><a href="#2-删除一行" class="headerlink" title="2.删除一行"></a>2.删除一行</h2><p>  删除一整行内容使用”dd”命令。删除后下面的行会移上来填补空缺。</p><h2 id="3-删除换行符"><a href="#3-删除换行符" class="headerlink" title="3.删除换行符"></a>3.删除换行符</h2><p>  在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是”J”。</p><a id="more"></a><h2 id="4-撤销"><a href="#4-撤销" class="headerlink" title="4.撤销"></a>4.撤销</h2><p>  如果你误删了过多的内容。显然你可以再输入一遍，但是命令”u” 更简便，它可以撤消上一次的操作。</p><h2 id="5-重做"><a href="#5-重做" class="headerlink" title="5.重做"></a>5.重做</h2><p>  如果你撤消了多次，你还可以用CTRL-R(重做)来反转撤消的动作。换句话说，它是对撤消的撤消。撤消命令还有另一种形式，”U”命令，它一次撤消对一行的全部操作。第二次使用该命令则会撤消前一个”U”的操作。用”u”和CTRL-R你可以找回任何一个操作状态。</p><h2 id="6-追加"><a href="#6-追加" class="headerlink" title="6.追加"></a>6.追加</h2><p>  “i”命令可以在当前光标之前插入文本。<br>  “a”命令可以在当前光标之后插入文本。<br>  “o”命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。<br>  “O”命令(注意是大写的字母O)将在当前行的上面另起一行。</p><h2 id="7-使用命令计数"><a href="#7-使用命令计数" class="headerlink" title="7.使用命令计数"></a>7.使用命令计数</h2><p>  假设你要向上移动9行。这可以用”kkkkkkkkk”或”9k”来完成。事实上，很多命令都可以接受一个数字作为重复执行同一命令的次数。比如刚才的例子，要在行尾追加三个感叹号，当时用的命令是”a!!!”。另一个办法是用”3a!”命令。3说明该命令将被重复执行3次。同样，删除3个字符可以用”3x”。指定的数字要紧挨在它所要修饰的命令前面。</p><h2 id="8-退出"><a href="#8-退出" class="headerlink" title="8.退出"></a>8.退出</h2><p>  要退出Vim，用命令”ZZ”。该命令保存当前文件并退出Vim。</p><h2 id="9-放弃编辑"><a href="#9-放弃编辑" class="headerlink" title="9.放弃编辑"></a>9.放弃编辑</h2><p>  丢弃所有的修改并退出，用命令”:q!”。用”:e!”命令放弃所有修改并重新载入该文件的原始内容。</p><h2 id="10-以Word为单位的移动"><a href="#10-以Word为单位的移动" class="headerlink" title="10.以Word为单位的移动"></a>10.以Word为单位的移动</h2><p>  使用”w”命令可以将光标向前移动一个word的首字符上；比如”3w”将光标向前移动3个words。”b”命令则将光标向后移动到前一个word的首字符上。<br>  “e”命令会将光标移动到下一个word的最后一个字符。命令”ge”，它将光标移动到前一个word的最后一个字符上。、</p><h2 id="11-移动到行首或行尾"><a href="#11-移动到行首或行尾" class="headerlink" title="11.移动到行首或行尾"></a>11.移动到行首或行尾</h2><p>  “$“命令将光标移动到当前行行尾。如果你的键盘上有一个键，它的作用也一样。”^”命令将光标移动到当前行的第一个非空白字符上。”0”命令则总是把光标移动到当前行的第一个字符上。键也是如此。”$”命令还可接受一个计数，如”1$”会将光标移动到当前行行尾，”2$”则会移动到下一行的行尾，如此类推。”0”命令却不能接受类似这样的计数，命令”^”前加上一个计数也没有任何效果。</p><h2 id="12-移动到指定字符上"><a href="#12-移动到指定字符上" class="headerlink" title="12.移动到指定字符上"></a>12.移动到指定字符上</h2><p>  命令”fx”在当前行上查找下一个字符x（向右方向），可以带一个命令计数”F”命令向左方向搜索。”tx”命令形同”fx”命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示：”t”意为”To”。该命令的反方向版是”Tx”。这4个命令都可以用”;”来重复。以”,”也是重复同样的命令，但是方向与原命令的方向相反。</p><h2 id="13-以匹配一个括号为目的移动"><a href="#13-以匹配一个括号为目的移动" class="headerlink" title="13.以匹配一个括号为目的移动"></a>13.以匹配一个括号为目的移动</h2><p>  用命令”%”跳转到与当前光标下的括号相匹配的那一个括号上去。如果当前光标在”(“上，它就向前跳转到与它匹配的”)”上，如果当前在”)”上，它就向后自动跳转到匹配的”(“上去.</p><h2 id="14-移动到指定行"><a href="#14-移动到指定行" class="headerlink" title="14.移动到指定行"></a>14.移动到指定行</h2><p>  用”G”命令指定一个命令计数，这个命令就会把光标定位到由命令计数指定的行上。比如”33G”就会把光标置于第33行上。没有指定命令计数作为参数的话, “G”会把光标定位到最后一行上。”gg”命令是跳转到第一行的快捷的方法。<br>  另一个移动到某行的方法是在命令”%”之前指定一个命令计数比如”50%”将会把光标定位在文件的中间. “90%”跳到接近文件尾的地方。<br>  命令”H”,”M”,”L”,分别将光标跳转到第一行，中间行，结尾行部分。</p><h2 id="15-告诉你当前的位置"><a href="#15-告诉你当前的位置" class="headerlink" title="15.告诉你当前的位置"></a>15.告诉你当前的位置</h2><p>  使用CTRL-G命令。”set number”在每行的前面显示一个行号。相反关闭行号用命令”:set nonumber”。”:set ruler”在Vim窗口的右下角显示当前光标位置。</p><h2 id="16-滚屏"><a href="#16-滚屏" class="headerlink" title="16.滚屏"></a>16.滚屏</h2><p>  CTRL-U显示文本的窗口向上滚动了半屏。CTRL-D命令将窗口向下移动半屏。一次滚动一行可以使用CTRL-E(向上滚动)和CTRL-Y(向下滚动)。要向前滚动一整屏使用命令CTRL-F。另外CTRL-B是它的反向版。”zz”命令会把当前行置为屏幕正中央，”zt”命令会把当前行置于屏幕顶端，”zb”则把当前行置于屏幕底端.</p><h2 id="17-简单搜索"><a href="#17-简单搜索" class="headerlink" title="17.简单搜索"></a>17.简单搜索</h2><p>  “/string”命令可用于搜索一个字符串。要查找上次查找的字符串的下一个位置,使用”n”命令。如果你知道你要找的确切位置是目标字符串的第几次出现，还可以在”n”之前放置一个命令计数。”3n”会去查找目标字符串的第3次出现。<br>  “?”命令与”/“的工作相同，只是搜索方向相反.”N”命令会重复前一次查找，但是与最初用”/“或”?”指定的搜索方向相反。<br>  如果查找内容忽略大小写，则用命令”set ignorecase”, 返回精确匹配用命令”set noignorecase” 。</p><h2 id="18-在文本中查找下一个word"><a href="#18-在文本中查找下一个word" class="headerlink" title="18.在文本中查找下一个word"></a>18.在文本中查找下一个word</h2><p>  把光标定位于这个word上然后按下”*”键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。”#”命令是”*”的反向版。还可以在这两个命令前加一个命令计数:”3*”查找当前光标下的word的第三次出现。</p><h2 id="19-查找整个word"><a href="#19-查找整个word" class="headerlink" title="19.查找整个word"></a>19.查找整个word</h2><p>  如果你用”/the”来查找Vim也会匹配到”there”。要查找作为独立单词的”the”使用如下命令：”/the&gt;“。”&gt;“是一个特殊的记法，它只匹配一个word的结束处。近似地，”&lt;“匹配到一个word的开始处。这样查找作为一个word的”the”就可以用:”/&quot;。</p><h2 id="20-高亮显示搜索结果"><a href="#20-高亮显示搜索结果" class="headerlink" title="20.高亮显示搜索结果"></a>20.高亮显示搜索结果</h2><p>  开启这一功能用”:set hlsearch”，关闭这一功能：”:set nohlsearch”。如果只是想去掉当前的高亮显示，可以使用下面的命令：”:nohlsearch”(可以简写为noh)。</p><h2 id="21-匹配一行的开头与结尾"><a href="#21-匹配一行的开头与结尾" class="headerlink" title="21.匹配一行的开头与结尾"></a>21.匹配一行的开头与结尾</h2><p>   ^ 字符匹配一行的开头。$字符匹配一行的末尾。<br>   所以”/was$”只匹配位于一行末尾的单词was，所以”/^was”只匹配位于一行开始的单词was。</p><h2 id="22-匹配任何的单字符"><a href="#22-匹配任何的单字符" class="headerlink" title="22.匹配任何的单字符"></a>22.匹配任何的单字符</h2><p>  .这个字符可以匹配到任何字符。比如”c.m”可以匹配任何前一个字符是c，后一个字符是m的情况，不管中间的字符是什么。</p><h2 id="23-匹配特殊字符"><a href="#23-匹配特殊字符" class="headerlink" title="23.匹配特殊字符"></a>23.匹配特殊字符</h2><p>  放一个反斜杠在特殊字符前面。如果你查找”ter。”，用命令”/ter\。”</p><h2 id="24-使用标记"><a href="#24-使用标记" class="headerlink" title="24.使用标记"></a>24.使用标记</h2><p>  当你用”G”命令从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用命令” <code>&quot;可以使你跳回到刚才的出发点。</code>命令可以在两点之间来回跳转。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older). CTRL-I则是跳回到后来停置光标的更新的位置(提示：I在键盘上位于O前面)。<br>    注:使用CTRL-I 与按下键一样。</p><h2 id="25-具名标记"><a href="#25-具名标记" class="headerlink" title="25.具名标记"></a>25.具名标记</h2><p>   命令”ma”将当前光标下的位置名之为标记”a”。从a到z一共可以使用26个自定义的标记。要跳转到一个你定义过的标记，使用命令” <code>marks &quot;marks就是定义的标记的名字。命令&quot; &#39;a &quot;使你跳转到a所在行的行首，&quot;</code>a “会精确定位a所在的位置。命令：”:marks”用来查看标记的列表。<br>  命令delm！删除所有标记。</p><h2 id="26-操作符命令和位移"><a href="#26-操作符命令和位移" class="headerlink" title="26.操作符命令和位移"></a>26.操作符命令和位移</h2><p>  “dw”命令可以删除一个word，”d4w”命令是删除4个word，依此类推。类似有”d2e”、”d$”。此类命令有一个固定的模式：操作符命令+位移命令。首先键入一个操作符命令。比如”d”是一个删除操作符。接下来是一个位移命。比如”w”。这样任何移动光标命令所及之处，都是命令的作用范围。</p><h2 id="27-改变文本"><a href="#27-改变文本" class="headerlink" title="27.改变文本"></a>27.改变文本</h2><p>  操作符命令是”c”，改变命令。它的行为与”d”命令类似，不过在命令执行后会进入Insert模式。比如”cw”改变一个word。或者，更准确地说，它删除一个word并让你置身于Insert模式。<br>  “cc”命令可以改变整行。不过仍保持原来的缩进。<br>  “c$”改变当前光标到行尾的内容。<br>  快捷命令：x 代表dl(删除当前光标下的字符)<br>            X 代表dh(删除当前光标左边的字符)<br>            D 代表d$(删除到行尾的内容)<br>C 代表c$(修改到行尾的内容)<br> s 代表cl(修改一个字符)<br> S 代表cc(修改一整行)<br> 命令”3dw”和”d3w”都是删除3个word。第一个命令”3dw”可以看作是删除一个word的操作执行3次；第二个命令”d3w”是一次删除3个word。这是其中不明显的差异。事实上你可以在两处都放上命令记数，比如，”3d2w”是删除两个word，重复执行3次，总共是6个word。</p><h2 id="28-替换单个字符"><a href="#28-替换单个字符" class="headerlink" title="28.替换单个字符"></a>28.替换单个字符</h2><p>  “r”命令不是一个操作符命令。它等待你键入下一个字符用以替换当前光标下的那个字符。”r”命令前辍以一个命令记数是将多个字符都替换为即将输入的那个字符。要把一个字符替换为一个换行符使用”r”。它会删除一个字符并插入一个换行符。在此处使用命令记数只会删除指定个数的字符：”4r”将把4个字符替换为一个换行符。</p><h2 id="29-重复改动"><a href="#29-重复改动" class="headerlink" title="29.重复改动"></a>29.重复改动</h2><p>  “.”命令会重复上一次做出的改动。”.”命令会重复你做出的所有修改，除了”u”命令CTRL-R和以冒号开头的命令。”.”需要在Normal模式下执行，它重复的是命令，而不是被改动的内容，</p><h2 id="30-Visual模式"><a href="#30-Visual模式" class="headerlink" title="30.Visual模式"></a>30.Visual模式</h2><p>  按”v”可以进入Visual模式。移动光标以覆盖你想操纵的文本范围。同时被选中的文本会以高亮显示。最后键入操作符命令。</p><h2 id="31-移动文本"><a href="#31-移动文本" class="headerlink" title="31.移动文本"></a>31.移动文本</h2><p>  以”d”或”x”这样的命令删除文本时，被删除的内容还是被保存了起来。你还可以用p命令把它取回来。”P”命令是把被去回的内容放在光标之前，”p”则是放在光标之后。对于以”dd”删除的整行内容，”P”会把它置于当前行的上一行。”p”则是至于当前行的后一行。也可以对命令”p”和”P”命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来”dd”之后的”3p”就可以把被删除行的3 份副本放到当前位置。<br>  命令”xp”将光标所在的字符与后一个字符交换。</p><h2 id="32-复制文本（VIM编辑器内复制）"><a href="#32-复制文本（VIM编辑器内复制）" class="headerlink" title="32. 复制文本（VIM编辑器内复制）"></a>32. 复制文本（VIM编辑器内复制）</h2><p>  “y”操作符命令会把文本复制到一个寄存器3中。然后可以用”p”命令把它取回。因为”y”是一个操作符命令，所以你可以用”yw”来复制一个word. 同样可以使用命令记数。如下例中用”y2w”命令复制两个word，”yy”命令复制一整行，”Y”也是复制整行的内容，复制当前光标至行尾的命令是”y$”。</p><h2 id="33-文本对象"><a href="#33-文本对象" class="headerlink" title="33.文本对象"></a>33.文本对象</h2><p>  “diw” 删除当前光标所在的word(不包括空白字符) “daw” 删除当前光标所在的word(包括空白字符)</p><h2 id="34-快捷命令"><a href="#34-快捷命令" class="headerlink" title="34.快捷命令"></a>34.快捷命令</h2><p>  x 删除当前光标下的字符(“dl”的快捷命令)<br>  X 删除当前光标之前的字符(“dh”的快捷命令)<br>  D 删除自当前光标至行尾的内容(“d$”的快捷命令)<br>  dw 删除自当前光标至下一个word的开头<br>  db 删除自当前光标至前一个word的开始<br>  diw 删除当前光标所在的word(不包括空白字符)<br>  daw 删除当前光标所在的word(包括空白字符)<br>  dG 删除当前行至文件尾的内容<br>  dgg 删除当前行至文件头的内容<br>  如果你用”c”命令代替”d”这些命令就都变成更改命令。使用”y”就是yank命令，如此类推。</p><h2 id="35-编辑另一个文件"><a href="#35-编辑另一个文件" class="headerlink" title="35.编辑另一个文件"></a>35.编辑另一个文件</h2><p>  用命令”:edit foo.txt”，也可简写为”:e foo.txt”。</p><h2 id="36-文件列表"><a href="#36-文件列表" class="headerlink" title="36.文件列表"></a>36.文件列表</h2><p>  可以在启动Vim时就指定要编辑多个文件，用命令”vim one.c two.c three.c”。Vim将在启动后只显示第一个文件，完成该文件的编辑后，可以用令：”:next”或”:n”要保存工作成果并继续下一个文件的编辑，命令：”:wnext”或”:wn”可以合并这一过程。</p><h2 id="37-显示当前正在编辑的文件"><a href="#37-显示当前正在编辑的文件" class="headerlink" title="37.显示当前正在编辑的文件"></a>37.显示当前正在编辑的文件</h2><p>  用命令”:args”。</p><h2 id="38-移动到另一个文件"><a href="#38-移动到另一个文件" class="headerlink" title="38.移动到另一个文件"></a>38.移动到另一个文件</h2><p>  用命令”:previous” “:prev”回到上一个文件,合并保存步骤则是”:wprevious” “:wprev”。要移到最后一个文件”:last”,到第一个”:first”.不过没有”:wlast”或者”:wfirst”这样的命令。可以在”:next”和”:previous”命令前面使用一个命令计数。</p><h2 id="39-编辑另一个文件列表"><a href="#39-编辑另一个文件列表" class="headerlink" title="39.编辑另一个文件列表"></a>39.编辑另一个文件列表</h2><p>  不用重新启动Vim，就可以重新定义一个文件列表。命令”:args five.c six.c seven.h”定义了要编辑的三个文件。</p><h2 id="39-自动存盘"><a href="#39-自动存盘" class="headerlink" title="39.自动存盘"></a>39.自动存盘</h2><p>  命令”:set autowrite”,”set aw”。自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行。<br>  命令”:set autowriteall”,”set awa”。和 ‘autowrite’ 类似，但也适用于”:edit”、”:enew”、”:quit”、”:qall”、”:exit”、”:xit”、”:recover” 和关闭 Vim 窗口。置位本选项也意味着 Vim 的行为就像打开 ‘autowrite’ 一样。</p><h2 id="40-切换到另一文件"><a href="#40-切换到另一文件" class="headerlink" title="40.切换到另一文件"></a>40.切换到另一文件</h2><p>  要在两个文件间快速切换，使用CTRL-^。</p><h2 id="41-文件标记"><a href="#41-文件标记" class="headerlink" title="41.文件标记"></a>41.文件标记</h2><p>  以大写字母命名的标记。它们是全局标记，它们可以用在任何文件中。比如，正在编辑”fab1.<a href="http://lib.csdn.net/base/javaee" target="_blank" rel="noopener">Java</a>“,用命令”50%mF”在文件的中间设置一个名为F的标记。然后在”fab2.java”文件中，用命令”GnB”在最后一行设置名为B的标记。在可以用”F”命令跳转到文件”fab1.java”的半中间。或者编辑另一个文件，”‘B”命令会再把你带回文件”fab2.java”的最后一行。<br>  要知道某个标记所代表的位置是什么，可以将该标记的名字作为”marks”命令的参数”:marks M”或者连续跟上几个参数”:marks MJK”<br>  可以用CTRL-O和CTRL-I可以跳转到较早的位置和靠后的某位置。</p><h2 id="42-查看文件"><a href="#42-查看文件" class="headerlink" title="42.查看文件"></a>42.查看文件</h2><p>  仅是查看文件，不向文件写入内容，可以用只读形式编辑文件。用命令：<br>vim -R file。如果是想强制性地避免对文件进行修改，可以用命令：<br>vim -M file。</p><h2 id="43-更改文件名"><a href="#43-更改文件名" class="headerlink" title="43.更改文件名"></a>43.更改文件名</h2><p>  将现有文件存成新的文件，用命令”:sav(eas) move.c”。如果想改变当前正在编辑的文件名，但不想保存该文件，就可以用命令：”:f(ile) move.c”。</p><h2 id="44-分割一个窗口"><a href="#44-分割一个窗口" class="headerlink" title="44.分割一个窗口"></a>44.分割一个窗口</h2><p>  打开一个新窗口最简单的办法就是使用命令：”:split”。CTRL-W 命令可以切换当前活动窗口。</p><h2 id="45-关闭窗口"><a href="#45-关闭窗口" class="headerlink" title="45.关闭窗口"></a>45.关闭窗口</h2><p>  用命令：”close”.可以关闭当前窗口。实际上,任何退出文件编辑的命令”:quit”和”ZZ”都会关闭窗口，但是用”:close”可以阻止你关闭最后一个Vim，以免以意外地整个关闭了Vim。</p><h2 id="46-关闭除当前窗口外的所有其他窗口"><a href="#46-关闭除当前窗口外的所有其他窗口" class="headerlink" title="46.关闭除当前窗口外的所有其他窗口"></a>46.关闭除当前窗口外的所有其他窗口</h2><p>  用命令：”:only”,关闭除当前窗口外的所有其它窗口。如果这些窗口中有被修改过的，你会得到一个错误信息，同时那个窗口会被留下来。</p><h2 id="47-为另一个文件分隔出一个窗口"><a href="#47-为另一个文件分隔出一个窗口" class="headerlink" title="47.为另一个文件分隔出一个窗口"></a>47.为另一个文件分隔出一个窗口</h2><p>  命令”:split two.c”可以打开第二个窗口同时在新打开的窗口中开始编辑作为<br>参数的文件。如果要打开一个新窗口并开始编辑一个空的缓冲区，使用命令:”:new”。</p><h2 id="48-垂直分割"><a href="#48-垂直分割" class="headerlink" title="48.垂直分割"></a>48.垂直分割</h2><p>  用命令”:vsplit或：:vsplit two.c”。同样有一个对应的”:vnew”命令，用于垂直分隔窗口并在其中打开一个新的空缓冲区。</p><h2 id="49-切换窗口"><a href="#49-切换窗口" class="headerlink" title="49.切换窗口"></a>49.切换窗口</h2><p>  CTRL-W h 到左边的窗口<br>  CTRL-W j 到下面的窗口<br>  CTRL-W k 到上面的窗口<br>  CTRL-W l 到右边的窗口<br>  CTRL-W t 到顶部窗口<br>  CTRL-W b 到底部窗口</p><h2 id="50-针对所有窗口操作的命令"><a href="#50-针对所有窗口操作的命令" class="headerlink" title="50.针对所有窗口操作的命令"></a>50.针对所有窗口操作的命令</h2><p>  “:qall”放弃所有操作并退出，”:wall”保存所有，”:wqall”保存所有并退出。</p><h2 id="51-为每一个文件打开一个窗口"><a href="#51-为每一个文件打开一个窗口" class="headerlink" title="51.为每一个文件打开一个窗口"></a>51.为每一个文件打开一个窗口</h2><p>  使用”-o”选项可以让Vim为每一个文件打开一个窗口：<br>“vim -o one.txt two.txt three.txt”。</p><h2 id="52-使用vimdiff查看不同"><a href="#52-使用vimdiff查看不同" class="headerlink" title="52.使用vimdiff查看不同"></a>52.使用vimdiff查看不同</h2><p>  “vimdiff main.c~ main.c”,另一种进入diff模式的办法可以在Vim运行中操作。编辑文件”main.c”，然后打开另一个分隔窗口显示其不同:<br>  “:edit main.c”<br>  “:vertical diffpatch main.c.diff”。</p><h2 id="53-页签"><a href="#53-页签" class="headerlink" title="53.页签"></a>53.页签</h2><p>   命令”:tabe(dit) thatfile”在一个窗口中打开”thatfile”，该窗口占据着整个的Vim显示区域。命令”:tab split/new”结果是新建了一个拥有一个窗口的页签。以用”gt”命令在不同的页签间切换。</p><h2 id="54-进入编辑模式的快捷键"><a href="#54-进入编辑模式的快捷键" class="headerlink" title="54. 进入编辑模式的快捷键"></a>54. 进入编辑模式的快捷键</h2><p>　　i 在光标所在字符前开始输入文字<br>　　I    在行首第一个非空字符处开始输入文字<br>　　a    在光标所在字符后开始输入文字<br>　　A    在行尾开始输入文字<br>　　o    在光标所在行的下面单独开始一行输入文字<br>　　O    在光标所在行的上面单独开始一行输入文字<br>　　s    删除光标所在的字符并进入插入模式<br>　　S    删除光标所在行并进入插入模式</p><p>　　放弃修改过的内容,在命令模式，e！，撤销所有修改，并没有退出文件。</p><h2 id="55-光标定位"><a href="#55-光标定位" class="headerlink" title="55.光标定位"></a>55.光标定位</h2><p>　　vim 文件名    打开文件，光标定位到开头<br>　　vim 文件名 +n    将光标定位文件第n行<br>　　vim 文件名 +    将光标定位到文件末尾<br>　　gg    首行<br>　　GG    尾行<br>　　ngg    第n行，等价于命令模式下的：n，然后回车<br>　　0    行首<br>　　^    首个非空字符<br>　　$    行尾<br>　　k    向上<br>　　j    向下<br>　　h    向左<br>　　l    向右</p><hr><h2 id="56-复制粘贴"><a href="#56-复制粘贴" class="headerlink" title="56.复制粘贴"></a>56.复制粘贴</h2><p>　　yy    复制所在行</p><p>　　dd    剪切所在行<br>　　p    粘贴<br>　　nyy    复制所在行开始的n行<br>　　ndd    剪切所在行开始的n行</p><hr><h2 id="57-撤销操作"><a href="#57-撤销操作" class="headerlink" title="57.撤销操作"></a>57.撤销操作</h2><p>　　u    撤销<br>　　ctrl+r    反撤销</p><hr><h2 id="58-查找替换"><a href="#58-查找替换" class="headerlink" title="58.查找替换"></a>58.查找替换</h2><p> 　　:？查找的内容（n向前翻，N向后翻）<br>　　:%s/查找内容/替换内容/[g] 将查到的内容替换，g表示全局替换，可选。<br>　　:起始行,结束行s/查找内容/替换内容/[g]， 替换从起始行到结束行找到的内容。</p><hr><h2 id="59-基本配置"><a href="#59-基本配置" class="headerlink" title="59.基本配置"></a>59.基本配置</h2><p>　　:set nu    显示行号<br>　　:set nonu    取消行号<br>　　:set tabstop=4    设置tab键为4个空格<br>　　:set fileencodines=utf08,gbk    设置字符集</p><p>　　这些配置在退出vim后，下次使用vim就是无效的了，只针对本次。<br>　　如果想自动生效，需要在用户目录下，创建.vimrc文件，就是vim的配置文件，<br>　　使配置文件失效可以使用命令：source ~/.vimrc或重启系统。</p><h2 id="60-键盘对应图"><a href="#60-键盘对应图" class="headerlink" title="60.键盘对应图"></a>60.键盘对应图</h2><p><img src="/.io//vim_keyboard.png%22vim%E9%94%AE%E7%9B%98%E5%AF%B9%E5%BA%94%E5%9B%BE%22" alt="键盘对应图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-删除字符&quot;&gt;&lt;a href=&quot;#1-删除字符&quot; class=&quot;headerlink&quot; title=&quot;1.删除字符&quot;&gt;&lt;/a&gt;1.删除字符&lt;/h2&gt;&lt;p&gt;  要删除一个字符，只需要将光标移到该字符上按下”x”。&lt;/p&gt;
&lt;h2 id=&quot;2-删除一行&quot;&gt;&lt;a href=&quot;#2-删除一行&quot; class=&quot;headerlink&quot; title=&quot;2.删除一行&quot;&gt;&lt;/a&gt;2.删除一行&lt;/h2&gt;&lt;p&gt;  删除一整行内容使用”dd”命令。删除后下面的行会移上来填补空缺。&lt;/p&gt;
&lt;h2 id=&quot;3-删除换行符&quot;&gt;&lt;a href=&quot;#3-删除换行符&quot; class=&quot;headerlink&quot; title=&quot;3.删除换行符&quot;&gt;&lt;/a&gt;3.删除换行符&lt;/h2&gt;&lt;p&gt;  在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是”J”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://toukihei.github.io/tags/Linux/"/>
    
      <category term="vim" scheme="https://toukihei.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Markdown写博客</title>
    <link href="https://toukihei.github.io/2019/07/20/%E7%94%A8Markdown%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>https://toukihei.github.io/2019/07/20/用Markdown写博客/</id>
    <published>2019-07-20T07:39:38.000Z</published>
    <updated>2019-07-25T13:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="没有动笔的理由"><a href="#没有动笔的理由" class="headerlink" title="没有动笔的理由"></a>没有动笔的理由</h1><p>良好的写作来源于平时的积累，之前一直没有动笔，可能是机缘未到。</p><ol><li>没有遇到提醒你写作重要性的人；</li><li>没有找到合适的园地以及没有接触到顺手的工具。<br>现在万事具备，即将开始全新的写作之旅。  </li></ol><p>先讲讲顺手的工具。markdown这几年逐渐流行起来，还是在于大家在写作时遇到的共性问题：</p><h1 id="在编写文档时遇到的问题"><a href="#在编写文档时遇到的问题" class="headerlink" title="在编写文档时遇到的问题"></a>在编写文档时遇到的问题</h1><ul><li>在编写html时需要时刻注意字体格式、整体样式，所以把图片、文字、堆积成美丽的页面需要花费太多的时间；</li><li>在编写网页博客之类的网页时，主要还是关注文章的结构和内容，而对网页的布局与美化不会有过高的要求。</li><li>Office本身功能非常强大，功能强大的另一面时软件本身运行起来越来越耗费资源。word文件在打开时经常出现卡顿，分散精力的部分非常多。</li><li>Latex非常适合程序员写作，而且轻便，也能应用于网页的发布，有很好的用户体验，但对于普通用户并不容易掌握，而且在把tex文件转化成网页时遇到很多问题。</li></ul><p>为了解决以上列举的问题，markdown应运而生。</p><a id="more"></a><h1 id="什么是Markdown？"><a href="#什么是Markdown？" class="headerlink" title="什么是Markdown？"></a>什么是Markdown？</h1><h2 id="英文简介"><a href="#英文简介" class="headerlink" title="英文简介"></a>英文简介</h2><blockquote><p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML)［1］.</p></blockquote><h2 id="维基百科上的定义"><a href="#维基百科上的定义" class="headerlink" title="维基百科上的定义"></a>维基百科上的定义</h2><blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”.</p></blockquote><h2 id="Markdown-和HTML的区别"><a href="#Markdown-和HTML的区别" class="headerlink" title="Markdown 和HTML的区别"></a>Markdown 和HTML的区别</h2><ul><li><em>HTML</em> 的全称是hypertext markup language，注意里面的markup; <em>markdown</em>刚好相反，取名反标记，对应于markup。这种命名方式很容易让人想到提倡自由软件（copyleft）的人们，版权(copyright)管理帮助一部分人挣钱的同时，一定程度上阻碍了软件的发展。</li><li>markup 是内容以上的处理，关注形式，样式，格式等；而markdown 关注内容。抓住主要矛盾是写作时需要重点关注的。</li></ul><h2 id="科技写作"><a href="#科技写作" class="headerlink" title="科技写作"></a>科技写作</h2><p>下面聊聊科技写作，科技写作主要的难点在于公式、图表、参考文献的完美展现，LaTeX是国际科学界，尤其是偏数理类的学科的主流方案之一。LaTeX对于中文的处理一直不尽人意，中文的字库安装起来更是占据大量的空间，而轻量级的markdown能否在科技写作中发挥较大的作用呢?真是满怀期待。目前的markdown已经很好的支持了LaTeX的公式编辑功能，例如</p><p>$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $$</p><p>后续markdown结合其它软件来实现科技论文的写作，我想为期不远。<br>当前来说，markdown对于是否能够满足科技论文严格的排版问题，还需要开发人员进一步的努力。而博客作为格式自由的日常记录形式，使用markdown是非常的适用。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li>［1］: （<a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Markdown</a>)  </li><li>［2］:  (<a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">http://wowubuntu.com/markdown/</a>)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;没有动笔的理由&quot;&gt;&lt;a href=&quot;#没有动笔的理由&quot; class=&quot;headerlink&quot; title=&quot;没有动笔的理由&quot;&gt;&lt;/a&gt;没有动笔的理由&lt;/h1&gt;&lt;p&gt;良好的写作来源于平时的积累，之前一直没有动笔，可能是机缘未到。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有遇到提醒你写作重要性的人；&lt;/li&gt;
&lt;li&gt;没有找到合适的园地以及没有接触到顺手的工具。&lt;br&gt;现在万事具备，即将开始全新的写作之旅。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先讲讲顺手的工具。markdown这几年逐渐流行起来，还是在于大家在写作时遇到的共性问题：&lt;/p&gt;
&lt;h1 id=&quot;在编写文档时遇到的问题&quot;&gt;&lt;a href=&quot;#在编写文档时遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;在编写文档时遇到的问题&quot;&gt;&lt;/a&gt;在编写文档时遇到的问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在编写html时需要时刻注意字体格式、整体样式，所以把图片、文字、堆积成美丽的页面需要花费太多的时间；&lt;/li&gt;
&lt;li&gt;在编写网页博客之类的网页时，主要还是关注文章的结构和内容，而对网页的布局与美化不会有过高的要求。&lt;/li&gt;
&lt;li&gt;Office本身功能非常强大，功能强大的另一面时软件本身运行起来越来越耗费资源。word文件在打开时经常出现卡顿，分散精力的部分非常多。&lt;/li&gt;
&lt;li&gt;Latex非常适合程序员写作，而且轻便，也能应用于网页的发布，有很好的用户体验，但对于普通用户并不容易掌握，而且在把tex文件转化成网页时遇到很多问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决以上列举的问题，markdown应运而生。&lt;/p&gt;
    
    </summary>
    
    
      <category term="写作" scheme="https://toukihei.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>AB测试</title>
    <link href="https://toukihei.github.io/2019/07/19/AB%E6%B5%8B%E8%AF%95/"/>
    <id>https://toukihei.github.io/2019/07/19/AB测试/</id>
    <published>2019-07-19T03:11:59.000Z</published>
    <updated>2019-07-25T13:34:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、ABTest与统计学"><a href="#一-、ABTest与统计学" class="headerlink" title="一 、ABTest与统计学"></a>一 、ABTest与统计学</h1><p>数据分析告诉我们要不要去做一件事情，ab 实验反馈告诉我们我们做得好不好，哪里有问题，以及衡量可以带来多少确定性的增长。</p><p>ABTest的目的是为了快速验证一个版本是不是比另外一个版本要好。</p><p>统计学能告诉我们如何抽样才能具有充分的代表性，如何<strong>从样本反应出的信息中推测总体状况</strong>。</p><a id="more"></a><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><h3 id="1、中心极限定理："><a href="#1、中心极限定理：" class="headerlink" title="1、中心极限定理："></a><strong>1</strong>、中心极限定理：</h3><p>大量相互独立的随机变量，其均值（或者和）的分布以正态分布为极限（意思就是当满足某些条件的时候，比如Sample Size比较大，采样次数区域无穷大的时候，就越接近正态分布）。而这个定理amazing的地方在于，无论是什么分布的随机变量，都满足这个定理。</p><h3 id="2、大数定理"><a href="#2、大数定理" class="headerlink" title="2、大数定理"></a><strong>2</strong>、大数定理</h3><p>​    简单的可以描述为，如果有一个随机变量X，你不断的观察并且采样这个随机变量，得到了n个采样值，然后求得这n个采样值得平均值，当n趋向于正无穷的时候，这个平均值就收敛于这个随机变量X的期望。</p><h3 id="3、置信区间和统计显著性"><a href="#3、置信区间和统计显著性" class="headerlink" title="3、置信区间和统计显著性"></a>3、置信区间和统计显著性</h3><p>​        置信区间是（用来对一个概率样本的总体参数进行区间估计的） 样本均值范围，它展现了这个均值范围包含总体参数的概率，这个概率称为置信水平；</p><p>置信水平代表了估计的可靠度，一般而言，我们采用95% 的置信水平进行区间估计。</p><p>置信区间在ABtest中的意义：（两个总体的均值之差的置信区间）</p><p>由t检验大样本检验公式计算得出Z值（由均值、样本量、方差计算出来的统计值，通过这个统计值再结合分布公式，也可以计算出p value从而作出是否拒绝原假设的决策），再根据两个总体的均值、标准差和样本大小，利用以下公式即可求出两个总体均值差的95%置信区间:</p><p> <img src="https://images2018.cnblogs.com/blog/647922/201805/647922-20180531000949753-1774088922.jpg" alt="img"></p><p> 值得注意的是，置信区间的上下限同为正或负，只能说明试验是统计显著的（也就是试验版本和对照版本有差异），但是这个差异有可能是非常小的，在实际应用中微不足道的。因此，只有兼备统计显著和效果显著两个特征的结果，才能说明该版本是可用，值得发布的。</p><h1 id="二、如何抽样"><a href="#二、如何抽样" class="headerlink" title="二、如何抽样"></a>二、如何抽样</h1><p>要保证样本具有足够的代表性需要做到2点：</p><p>1、随机抽样</p><p>2、足够的样本量</p><h3 id="随机抽样"><a href="#随机抽样" class="headerlink" title="随机抽样"></a><strong>随机抽样</strong></h3><p>随机抽样可以保证样本中的每个研究个体均有相等的机会被抽中的抽样方法。常用的随机抽样法有：</p><p><strong>·</strong>简单随机抽样（simple randomsampling）</p><p><strong>·</strong>系统抽样（systematicsampling）-也称等距抽样</p><p><strong>·</strong>分层随机抽样（stratified randomsampling） </p><p><strong>·</strong>整群抽样（cluster sampling）</p><p><strong>ABTest中的样本（实验组和对照组用户群）是根据个体（具体某个用户）的某个属性（userId，cookie等）进行hash取模后抽取出来的。hash算法保证了抽取的随机性。因为互联网数据海量以及获取方便的特点，简单随机抽样是最常用的抽样方法。</strong></p><h3 id="足够的样本量"><a href="#足够的样本量" class="headerlink" title="足够的样本量"></a><strong>足够的样本量</strong></h3><p>足够的样本量怎么保证呢？我们在这里先不展开讲样本量如何影响最终结果的。但我们可以先建立一个定性的认识：样本量越大，通过样本去评估总体的误差就越小。当误差小于我们需要的精度时，样本量就足够了。</p><h1 id="三、-如何估计总体"><a href="#三、-如何估计总体" class="headerlink" title="三、 如何估计总体"></a><strong>三、 如何估计总体</strong></h1><p>经过抽样，我们得到了实验组和对照组的用户群。并通过观测收集（数据上报），得到这些用户当天是否活跃的数据。</p><p><strong>定理结论</strong></p><p>“随机变量之和的分布函数向正态分布收敛。“</p><p>凡是在一定条件下断定随机变量之和的极限分布是正态分布的定理，在概率论中被统称为“中心极限定理”。</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a><strong>理解</strong></h3><p>该定理的着眼点是“变量之和的分布”，一个变量服从正态分布的并不多，但多个变量之和的分布服从于正态分布则是普遍存在的。</p><p>例如均值，我们知道均值就是多个变量值之和的变换形式，是变量之和的平均值，故样本均值也是服从正态分布的。</p><p>中心极限定理揭示了大部分社会经济现象表现为正态分布的原因，正是中心极限定理让正态分布有了如此广阔的应用。在考虑随机因素总和的极限分布时，只要那些因素对总体的影响均匀的小，同时又是独立的，总和达到一定数量，则可认为其服从正态分布。</p><h3 id="中心极限定理解读"><a href="#中心极限定理解读" class="headerlink" title="中心极限定理解读"></a><strong>中心极限定理解读</strong></h3><p>1、样本均值约等于总体平均值；</p><p>2、不管总体是什么分布，任意一个总体的样本均值总会围绕在总体均值左右，呈现正态分布。</p><h3 id="如何应用？"><a href="#如何应用？" class="headerlink" title="如何应用？"></a><strong>如何应用？</strong></h3><p>如上可知，我们不知道总体的数量和均值，有了中心极限定理我们就可以通过一个抽样得到的样本，来推断总体的特征，这为我们研究总体的特性指明了一条路。具体标准作业流程如下：</p><p>1、直接抽取样本，其容量为n</p><p>2、求出均值和标准差s</p><p>3、根据标准差s，求出标准误差SE＝ </p><p>4、根据置信水平，如95%，查Z表，求出标准分</p><p>5、均值加减标准分个标准误差，即得出置信区间的上下限</p><p>至此我们会得出一个可信度为95%的区间，也就是说总体均值有95%的可能性落在这个区间里。这样我们仅通过一个样本的分析，就得到了不可能知晓的总体的均值的一个范围。</p><p>需要注意的是，大样本的估计本质上是，根据中心极限定理应用正态分布，求Z值，来计算置信区间。</p><h1 id="四、AB-test和离线评估的优缺点和使用场景"><a href="#四、AB-test和离线评估的优缺点和使用场景" class="headerlink" title="四、AB test和离线评估的优缺点和使用场景"></a><strong>四、AB test和离线评估的优缺点和使用场景</strong></h1><p>1、AB test 系统搭建和维护需要一定成本，对技术也有一定要求，如果该系统做得不好，用了反而有害；ab系统更多是用于方便衡量算法／产品优化带来的效果，对于用人紧缺的创业公司其实不是必要的；</p><p>2、离线评估最重要是模拟真实线上场景，如果模拟不好，离线测试的结果也不可信；</p><p>　　但是，当公司的ab test系统还没有搭建好的时候，离线评估还是很有必要，起码有一些明显的算法问题可以通过离线测试看出来，模型选择和调优也需要离线测试，而且离线测试不会对线上造成影响，ab实验则会；</p><p>3、当产品在市场上的竞争环境激烈，项目上线需要争取有利时机时，往往凭借战略决策来决定上线与否而不是ab实验，ab实验有一段观察期而且需要外部条件相对稳定才能得出客观的结论，适用于产品的发展期处于相对比较平稳的时候，防止决策错误导致数据下降；</p><p>　　因此，实时数据分析是有必要的，实时ab test必要性不是很强；</p><p>4、多数的ab test系统并不具备决策推全后仍然持续观察的能力，有一些关乎实现公司或者产品长期战略目标的功能／算法，可能短期内会导致指标下降或者没有明显增长，但是也必须要上线；</p><p>5、AB test 帮助你在现有流量中获取更多的收益，或者在现有流量中提升ROI，或者说在现有用户基础上提升活跃度，但是在衡量对用户量增长或者获取新流量是否有帮助上，ab test或者所起作用不大。</p><p>6、AB test还有一个缺点，就是只能做小范围的效果比较，比如作用于同一个场景使用不同算法的效果比较；比如它不能告诉我们，A业务的推荐算法是否比B业务的推荐算法做得好；也就是说它不能衡量一个模型的迁移和泛化能力；</p><p>到这里，我们已经实现了对版本A和版本B 全量发布后的用户日均使用时长的估计。那么，这是否可以得出版本B比版本A好的结论呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-、ABTest与统计学&quot;&gt;&lt;a href=&quot;#一-、ABTest与统计学&quot; class=&quot;headerlink&quot; title=&quot;一 、ABTest与统计学&quot;&gt;&lt;/a&gt;一 、ABTest与统计学&lt;/h1&gt;&lt;p&gt;数据分析告诉我们要不要去做一件事情，ab 实验反馈告诉我们我们做得好不好，哪里有问题，以及衡量可以带来多少确定性的增长。&lt;/p&gt;
&lt;p&gt;ABTest的目的是为了快速验证一个版本是不是比另外一个版本要好。&lt;/p&gt;
&lt;p&gt;统计学能告诉我们如何抽样才能具有充分的代表性，如何&lt;strong&gt;从样本反应出的信息中推测总体状况&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="统计学" scheme="https://toukihei.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
</feed>
